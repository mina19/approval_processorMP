#!/usr/bin/python
import sys
from argparse import ArgumentParser
from ConfigParser import SafeConfigParser

parser = ArgumentParser(description="Builds config file that can be used by simulate.py to create fake events. Doesn't check consistency of groups and pipelines. Ensure to give correct group, pipeline, search combination.")
### Add group, pipeline search options
parser.add_argument('--file', required=True, help='File to write config file')
parser.add_argument('--group', choices=['Test','CBC','Burst'], required=True)
parser.add_argument('--pipeline',choices=['pycbc','gstlal','CWB','LIB'],required=True)
parser.add_argument('--search', choices=['AllSky','HighMass','LowMass',None], default='None')
parser.add_argument('--instruments',type=str, choices=["H1","L1","V1","H1,V1","V1,H1","L1,V1","V1,L1","H1,L1","L1,H1","H1,L1,V1","H1,V1,L1","V1,H1,L1","V1,L1,H1","L1,H1,V1","L1,V1,H1",None], default="H1,L1")
### Add human response options
parser.add_argument('--humans',type=int,choices=[0,1], help='Adds humans section.  Supply boolean', default=0)
parser.add_argument('--human-response',type=int, choices=[0,1], help='Adds humans section.  Enter 1 for ADVOK 0 for ADVNO', default=0)
### Add segDB2grcDB section
parser.add_argument('--segdb2grcdb',type=int,choices=[0,1],help='Adds segdb2grcdb section. Supply boolean',default=0)
### Add IDQ requirement options
parser.add_argument('--idq',type=int,choices=[0,1], help='Adds idq section. Supply boolean', default=0)
parser.add_argument('--idq-response',type=int,choices=[0,1], help='Enter 1 for passing IDQ, 0 otherwise', default=0)
### Add VirgoDQ requirement options
parser.add_argument('--virgodq',type=int,choices=[0,1], help='Adds VirgoDQ section. Supply boolean', default=0)
parser.add_argument('--virgodq-veto',type=int,choices=[0,1], help='Enter 1 for passing data quality check, 0 otherwise', default=1)
parser.add_argument('--virgo-inj',type=int,choices=[0,1], help='Enter 1 for having a virgo inj, 0 otherwise', default=0)
### Add plot skymaps
parser.add_argument('--skymaps',type=int,choices=[0,1], help='Adds skymap section',default=0)
parser.add_argument('--lvem',type=int,choices=[0,1], help='Provide the lvem tag or not? Supply boolean', default=0)
### Add external_triggers
parser.add_argument('--ext-trigger', type=int,choices=[0,1],help='Adds external trigger section. Supply boolean',default=0)
### Add unblind injections
parser.add_argument('--unblind-inj', type=int,choices=[0,1],help='Adds unblind injections section. Supply boolean',default=0)

args = parser.parse_args()


config = SafeConfigParser()
config.add_section('general')
config.set('general', 'group', args.group)
config.set('general', 'pipeline', args.pipeline)
config.set('general', 'search', args.search)

if args.humans:
	config.add_section('humans')
	config.set('humans','request','False') # we want approval_processor to apply the ADVREQ and H1OPS, V1OPS, L1OPS labels
	config.set('humans','respond','True')
	config.set('humans','request delay','5')
	config.set('humans','request jitter','0')
	config.set('humans','site respond delay','60')
	config.set('humans','site respond jitter','5')
	config.set('humans','site respond prob', '1')
	config.set('humans','site success prob','1')
	config.set('humans','adv respond delay','60')
	config.set('humans','adv respond jitter','5')
	config.set('humans','adv respond prob', '1')
        config.set('humans','adv success prob', '1')
#	config.set('humans','adv success prob',str( (1.-1e-6) if args.human_response==1 else 1e-6))

if args.segdb2grcdb:
	config.add_section('segDB2grcDB')
	config.set('segDB2grcDB','start delay','10')
	config.set('segDB2grcDB','start jitter','1')
	config.set('segDB2grcDB','start prob','1')
	config.set('segDB2grcDB','flags','H1:DMT-ANALYSIS_READY:1 L1:DMT-ANALYSIS_READY:1')
	config.add_section('H1:DMT-ANALYSIS_READY:1')
	config.set('H1:DMT-ANALYSIS_READY:1','delay','30')
	config.set('H1:DMT-ANALYSIS_READY:1','jitter','0')
	config.set('H1:DMT-ANALYSIS_READY:1','prob','1')
	config.set('H1:DMT-ANALYSIS_READY:1','win','30')
	config.add_section('L1:DMT-ANALYSIS_READY:1')
	config.set('L1:DMT-ANALYSIS_READY:1','delay','30')
	config.set('L1:DMT-ANALYSIS_READY:1','jitter','0')
	config.set('L1:DMT-ANALYSIS_READY:1','prob','1')
	config.set('L1:DMT-ANALYSIS_READY:1','win','30')

if args.virgodq:
    config.add_section('VirgoDQ')
    config.set('VirgoDQ','instruments',args.instruments.replace(',',' '))
    config.set('VirgoDQ','start delay','10.0')
    config.set('VirgoDQ','start jitter' ,'1.0')
    config.set('VirgoDQ','start prob','1.0')
    
    config.set('VirgoDQ','ifostats delay','1.0')
    config.set('VirgoDQ','ifostats jitter','0.5')
    config.set('VirgoDQ','ifostats prob','1.0')
    
    config.set('VirgoDQ','vetoes delay','1.0')
    config.set('VirgoDQ','vetoes jitter','0.5')
    config.set('VirgoDQ','vetoes prob', str(args.virgodq_veto))
    
    config.set('VirgoDQ','rmsChan delay','1.0')
    config.set('VirgoDQ','rmsChan jitter','0.5')
    config.set('VirgoDQ','rmsChan prob','1.0')
    
    config.set('VirgoDQ','inj delay','1.0')
    config.set('VirgoDQ','inj jitter','0.5')
    config.set('VirgoDQ','inj prob',str(args.virgo_inj))
    
    config.set('VirgoDQ', 'pad left','10.0')
    config.set('VirgoDQ', 'pad right','10.0')
    
if args.idq:
	config.add_section('idq')
	# Don't write V1 in set of idq instruments
	idq_ifos = args.instruments.replace(',',' ')
	idq_ifos = idq_ifos if 'V1' not in idq_ifos else idq_ifos.replace('V1','')
	idq_ifos = idq_ifos.strip()
	config.set('idq','instruments',idq_ifos)
	config.set('idq','classifiers','ovl')
	config.set('idq','pad left','10')
	config.set('idq','pad right','10')
	### set the fap very close to 0 or 1 depending on argument
	fap = 1e-6 if args.idq_response==0 else (1. - 1e-6)
	config.set('idq','maxFAP',str(fap))
	config.set('idq','minFAP',str(fap))
	config.set('idq','start delay','1')
	config.set('idq','start jitter','0')
	config.set('idq','start prob','1')
	config.set('idq','tables delay','5')
	config.set('idq','tables jitter','0')
	config.set('idq','tables prob','1')
	config.set('idq','fap delay','5')
	config.set('idq','fap jitter','0')
	config.set('idq','fap prob','1')
	config.set('idq','gwf delay','5')
	config.set('idq','gwf jitter','0')
	config.set('idq','gwf prob','1')
	config.set('idq','timeseries delay','5')
	config.set('idq','timeseries jitter','0')
	config.set('idq','timeseries prob','1')
	config.set('idq','activeChan delay','10')
	config.set('idq','activeChan jitter','0')
	config.set('idq','activeChan prob','1')
	config.set('idq','calib delay','20')
	config.set('idq','calib jitter','0')
	config.set('idq','calib prob','1')
	config.set('idq','roc delay','20')
	config.set('idq','roc jitter','0')
	config.set('idq','roc prob','1')
	config.set('idq','stats delay','30')
	config.set('idq','stats jitter','0')
	config.set('idq','stats prob','1')
	
if args.skymaps:
#	config.add_section('plot skymaps')
#	config.set('plot skymaps','plotSkymap delay','10')
#	config.set('plot skymaps','plotSkymap jitter','0')
#	config.set('plot skymaps','plotSkymap prob','1')
#	config.add_section('skyviewer')
#	config.set('skyviewer','skyviewer delay','10')
#	config.set('skyviewer','skyviewer jitter','0')
#	config.set('skyviewer','skyviewer prob','1')
	if args.group=='CBC':
		config.add_section('bayestar')
		config.set('bayestar','lvem','True' if args.lvem else 'False')
		config.set('bayestar','start delay','10')
		config.set('bayestar','start jitter','1')
		config.set('bayestar','start prob','1')
		config.set('bayestar','finish delay','60')
		config.set('bayestar','finish jitter','5')
		config.set('bayestar','finish prob','1')
		config.set('bayestar','skymap delay','60')
		config.set('bayestar','skymap jitter','10')
		config.set('bayestar','skymap prob','1')
#		config.add_section('lalinference')
#		config.set('lalinference','lvem','True' if args.lvem else 'False')
#		config.set('lalinference','start delay','10')
#		config.set('lalinference','start jitter','0')
#		config.set('lalinference','start prob','1')
#		config.set('lalinference','finish delay','60')
#		config.set('lalinference','finish jitter','0')
#		config.set('lalinference','finish prob','1')
#		config.set('lalinference','skymap delay','60')
#		config.set('lalinference','skymap jitter','0')
#		config.set('lalinference','skymap prob','1')
	elif args.group=='Burst' and args.pipeline=='CWB':
		config.add_section('cwbPE')
		config.set('cwbPE','lvem','True' if args.lvem else 'False')
		config.set('cwbPE','finish delay','60')
		config.set('cwbPE','finish jitter','0')
		config.set('cwbPE','finish prob','1')
		config.set('cwbPE','skymap delay','60')
		config.set('cwbPE','skymap jitter','0')
		config.set('cwbPE','skymap prob','1')
		config.add_section('bayeswave')
		config.set('bayeswave','lvem','True' if args.lvem else 'False')
		config.set('bayeswave','start delay','10')
		config.set('bayeswave','start jitter','0')
		config.set('bayeswave','start prob','1')
		config.set('bayeswave','finish delay','60')
		config.set('bayeswave','finish jitter','0')
		config.set('bayeswave','finish prob','1')
		config.set('bayeswave','skymap delay','60')
		config.set('bayeswave','skymap jitter','0')
		config.set('bayeswave','skymap prob','1')
	elif args.group=='Burst' and args.pipeline=='LIB':
		config.add_section('lib')
		config.set('lib','lvem','True' if args.lvem else 'False')
		config.set('lib','start delay','10')
		config.set('lib','start jitter','0')
		config.set('lib','start prob','1')
		config.set('lib','finish delay','60')
		config.set('lib','finish jitter','0')
		config.set('lib','finish prob','1')
		config.set('lib','skymap delay','60')
		config.set('lib','skymap jitter','0')
		config.set('lib','skymap prob','1')
if args.ext_trigger:
	config.add_section('external triggers')
	config.set('external triggers','delay','60')
	config.set('external triggers','jitter','0')
	config.set('external triggers','respond prob','1')
	config.set('external triggers','success prob','1')
if args.unblind_inj:
	config.add_section('unblind injections')
	config.set('unblind injections','delay','60')
	config.set('unblind injections','jitter','0')
	config.set('unblind injections','respond prob','1')
	config.set('unblind injections','success prob','1')

with open(args.file, 'wb') as configfile:
    config.write(configfile)
